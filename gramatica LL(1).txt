BNF

<Programa> ::= "program" "id" ";" <BloqueVar> "{" <Cuerpo> "}" 
<BloqueVar> ::= "var" <ListaDefVar> | eps
<ListaDefVar> ::= <DefVar> ";" <ListaDefVar> | <DefVar> ";" 
<DefVar> ::= "id" ":" <Type>
<Type> ::= "Float" | "String"
<Cuerpo> ::=  <Cuerpo> <Sentencia>;  | eps
<Sentencia> ::= <Cíclica> | <Condicional> | <Asignación> | <Lectura> | <Escritura>
<Asignación> ::= "id" ":=" <Expresion>
<Expresion> ::= "constreal" | "id" | <Expresion> "+" <Expresion> | <Expresion> "-" <Expresion> | "-" <Expresion> | <Expresion> "*" <Expresion> | <Expresion> "/" <Expresion> | "("<Expresion>")" | <Expresion> "^" <Expresion> | "constcadena" | "substr""("<Expresion>, <Expresion>, <Expresion>")" | "find""("<Expresion>, <Expresion>")" | "long""("<Expresion>")"
<Cíclica> ::= "while" <Condicion> "{" <Cuerpo> "}"
<Condicional> ::= if <Condicion> "{" <Cuerpo> "}" "else" "{"<Cuerpo>"}" | "if" <Condicion> "{" <Cuerpo> "}"
<Condición> ::= <Expresion> "oprelacional" <Expresion> | <Condicion> "&" <Condicion> | <Condicion> "|" <Condicion> | "!"<Condicion> | "["<Condicion>"]"
<Lectura> ::= "read""("<Expresion>, "id"")"
<Escritura> ::= "write""("<ListaExp>")"
<ListaExp> ::= <ListaExp>","<Expresion> | <Expresion>

--------------------------------------------------------------------------

Sacamos amb y agregamos prioridades

P ::= program id ; B { F }
B ::= var L | eps
L ::= V ; L | V ;
V ::= id : Y 
Y ::= Float | String
F ::=  F S;  | eps
S ::= G | I | A | R | W
A ::= id := E
E ::= E + T | E - T | T
T ::= T * C | T / C | C
C ::= C ^ N | N
N ::= (E) | constreal | id | constcadena | substr(E, E, E) | find(E, E) | long(E) | -N
G ::= while D { F }
I ::= if D { F } else {F} | if D { F }
D ::= D|O | O
O ::= O&U | U
U ::= EoprelE | !U | [D]
R ::= read(E, id)
W ::= write(K)
K ::= K,E | E


--------------------------------------------------------------------------------------------

Sacar RI en E, F, T, C, D, O, K

P ::= program id ; B { F }
B ::= var L | eps
L ::= V ; L | V ;
V ::= id : Y 
Y ::= Float | String
F ::= S;F  | eps
S ::= G | I | A | R | W
A ::= id := E
E ::= TH
H ::= +TH | -TH | eps
T ::= CJ
J ::= *CJ | /CJ | eps
C ::= NM
M ::= ^NM | eps
N ::= (E) | constreal | id | constcadena | substr(E, E, E) | find(E, E) | long(E) | -N
G ::= while D { F }
I ::= if D { F } else {F} | if D { F }
D ::= OZ
Z ::= |OZ | eps
O ::= UQ
Q ::= &UQ | eps
U ::= EoprelE | !U | [D]
R ::= read(E, id)
W ::= write(K)
K ::= EX
X ::= ,EX | eps


-----------------------------------------------------------------------------------------------

Factorizando L, I 

P ::= program id ; B { F }
B ::= var L | eps
L ::= V;Ñ
Ñ ::= L | eps
V ::= id : Y 
Y ::= Float | String
F ::= S;F  | eps
S ::= G | I | A | R | W
A ::= id := E
E ::= TH
H ::= +TH | -TH | eps
T ::= CJ
J ::= *CJ | /CJ | eps
C ::= NM
M ::= ^NM | eps
N ::= (E) | constreal | id | constcadena | substr(E, E, E) | find(E, E) | long(E) | -N
G ::= while D { F }
I ::= if D { F } Δ
Δ ::= else {F} | eps
D ::= OZ
Z ::= |OZ | eps
O ::= UQ
Q ::= &UQ | eps
U ::= EoprelE | !U | [D]
R ::= read(E, id)
W ::= write(K)
K ::= EX
X ::= ,EX | eps


P --> <Programa>
A --> <Asignación>
B --> <BloqueVar>
C --> <Expresion3>
D --> <Condicion>
E --> <Expresion>
F --> <Cuerpo>
G --> <Cíclica>
H --> <Expresion5>
I --> <Condicional>
J --> <Expresion6>
K --> <ListaExp>
L --> <ListaDefVar>
M --> <Expresion7>
N --> <Expresion4>
Ñ --> <ListaDefVar2>
O --> <Condicion2>
Q --> <Condicion5>
R --> <Lectura>
S --> <Sentencia>
T --> <Expresion2>
U --> <Condicion3>
V --> <DefVar>
W --> <Escritura>
X --> <ListaExp2>
Y --> <Type>
Z --> <Condicion4>
Δ --> <Condicional2>

EN BNF
<Programa> ::= "program" "id" ";" <BloqueVar> "{" <Cuerpo> "}"
<BloqueVar> ::= "var" <ListaDefVar> | eps
<ListaDefVar> ::= <DefVar> ";" <ListaDefVar2>
<ListaDefVar2> ::= <ListaDefVar> | eps
<DefVar> ::= "id" ":" <Type>
<Type> ::= "Float" | "String"
<Cuerpo> ::= <Sentencia> ";" <Cuerpo> | eps
<Sentencia> ::= <Cíclica> | <Condicional> | <Asignación> | <Lectura> | <Escritura>
<Asignación> ::= "id" "opasig" <Exp>
<Exp> ::= <Exp2> <Exp5>
<Exp5> ::= "+" <Exp2> <Exp5> | "-" <Exp2> <Exp5> | eps
<Exp2> ::= <Exp3> <Exp6>
<Exp6> ::= "*" <Exp3> <Exp6> | "/" <Exp3> <Exp6> | eps
<Exp3> ::= <Exp4> <Exp7>
<Exp7> ::= "^" <Exp4> <Exp7> | eps
<Exp4> ::= "(" <Exp> ")" | "constreal" | "id" | "constcadena" | "substr" "(" <Exp> "," <Exp> "," <Exp> ")" | "find" "(" <Exp> "," <Exp> ")" | "long" "(" <Exp> ")" | "-" <Exp4>
<Cíclica> ::= "while" <Cond> "{" <Cuerpo> "}"
<Condicional> ::= "if" <Cond> "{" <Cuerpo> "}" <Condicional2>
<Condicional2> ::= "else" "{" <Cuerpo> "}" | eps
<Cond> ::= <Cond2> <Cond4>
<Cond4> ::= "|" <Cond2> <Cond4> | eps
<Cond2> ::= <Cond3> <Cond5>
<Cond5> ::= "&" <Cond3> <Cond5> | eps
<Cond3> ::= <Exp> "oprel" <Exp> | "!" <Cond3> | "[" <Cond> "]"
<Lectura> ::= "read" "(" <Exp> "," "id" ")"
<Escritura> ::= "write" "(" <ListaExp> ")"
<ListaExp> ::= <Exp> <ListaExp2>
<ListaExp2> ::= "," <Exp> <ListaExp2> | eps
